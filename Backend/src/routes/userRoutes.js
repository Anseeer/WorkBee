"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const inversify_container_1 = __importDefault(require("../inversify/inversify.container"));
const inversify_types_1 = __importDefault(require("../inversify/inversify.types"));
const authorizeMiddleware_1 = require("../middlewares/authorizeMiddleware");
const authMiddleware_1 = require("../middlewares/authMiddleware");
const router = express_1.default.Router();
const userController = inversify_container_1.default.get(inversify_types_1.default.userController);
router.post('/register', userController.register);
router.post('/login', userController.login);
router.post('/google-login', userController.googleLogin);
router.post('/logout', authMiddleware_1.auth, (0, authorizeMiddleware_1.authorize)(["User"]), userController.logout);
router.get('/fetch-data', authMiddleware_1.auth, userController.fetchData);
router.post('/forgot-password', userController.forgotPass);
router.post('/resend-otp', userController.resendOtp);
router.post('/verify-otp', userController.verifyOtp);
router.post('/reset-password', userController.resetPassword);
router.get('/fetch-availability', authMiddleware_1.auth, userController.fetchAvailability);
router.put('/update', authMiddleware_1.auth, userController.update);
router.post('/find-users-byId', authMiddleware_1.auth, userController.findUsersByIds);
exports.default = router;
